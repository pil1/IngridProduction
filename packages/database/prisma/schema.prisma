generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  password_hash       String
  email_verified_at   DateTime?
  two_factor_secret   String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  profile             Profile?
  submitted_expenses  Expense[] @relation("SubmittedBy")
  reviewed_expenses   Expense[] @relation("ReviewedBy")
  controller_expenses Expense[] @relation("ControllerBy")
  uploaded_receipts   Receipt[]
  user_modules        UserModule[]
}

model Profile {
  id                   String    @id @default(uuid())
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id              String    @unique
  company              Company?  @relation(fields: [company_id], references: [id], onDelete: SetNull)
  company_id           String?
  role                 UserRole
  first_name           String
  last_name            String
  email                String
  phone                String?
  avatar_url           String?
  bio                  String?
  timezone             String    @default("UTC")
  locale               String    @default("en")
  onboarding_completed Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
}

model Company {
  id                String            @id @default(uuid())
  name              String
  description       String?
  domain            String?
  logo_url          String?
  default_currency  String            @default("USD")
  timezone          String            @default("UTC")
  address           String?
  phone             String?
  email             String?
  website           String?
  settings          Json              @default("{}")
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  profiles          Profile[]
  locations         CompanyLocation[]
  company_modules   CompanyModule[]
  expenses          Expense[]
}

model CompanyLocation {
  id         String   @id @default(uuid())
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id String
  name       String
  address    String?
  is_primary Boolean  @default(false)
  created_at DateTime @default(now())
}

model Module {
  id           String          @id @default(uuid())
  name         String          @unique
  display_name String
  description  String?
  category     ModuleCategory
  is_system    Boolean         @default(false)
  is_active    Boolean         @default(true)
  created_at   DateTime        @default(now())
  company_modules CompanyModule[]
  user_modules UserModule[]
}

model CompanyModule {
  id         String   @id @default(uuid())
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id String
  module     Module   @relation(fields: [module_id], references: [id], onDelete: Cascade)
  module_id  String
  is_enabled Boolean  @default(true)
  settings   Json     @default("{}")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([company_id, module_id])
}

model UserModule {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  module    Module   @relation(fields: [module_id], references: [id], onDelete: Cascade)
  module_id String
  is_enabled Boolean  @default(true)
  created_at DateTime @default(now())

  @@unique([user_id, module_id])
}

model Expense {
  id                   String          @id @default(uuid())
  company              Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id           String
  submitted_by         User?           @relation("SubmittedBy", fields: [submitted_by_id], references: [id], onDelete: SetNull)
  submitted_by_id      String?
  title                String
  description          String?
  amount               Decimal
  currency_code        String
  base_currency_amount Decimal?
  exchange_rate        Decimal?
  expense_date         DateTime
  status               ExpenseStatus   @default(draft)
  category             ExpenseCategory?@relation(fields: [category_id], references: [id])
  category_id          String?
  gl_account           GLAccount?      @relation(fields: [gl_account_id], references: [id])
  gl_account_id        String?
  vendor               Vendor?         @relation(fields: [vendor_id], references: [id])
  vendor_id            String?
  merchant_name        String?
  project_code         String?
  cost_center          String?
  is_reimbursable      Boolean         @default(true)
  reviewer             User?           @relation("ReviewedBy", fields: [reviewer_id], references: [id], onDelete: SetNull)
  reviewer_id          String?
  reviewed_at          DateTime?
  review_notes         String?
  controller           User?           @relation("ControllerBy", fields: [controller_id], references: [id], onDelete: SetNull)
  controller_id        String?
  controller_approved_at DateTime?
  controller_notes     String?
  ai_confidence_score  Decimal?
  ai_extracted_data    Json?
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  receipts             Receipt[]
  line_items           ExpenseLineItem[]
}

model Receipt {
  id              String    @id @default(uuid())
  expense         Expense   @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  expense_id      String
  file_url        String
  file_name       String
  file_size       Int?
  mime_type       String?
  uploaded_by     User?     @relation(fields: [uploaded_by_id], references: [id])
  uploaded_by_id  String?
  extracted_text  String?
  ai_analysis     Json?
  document_hash   String?   @unique
  created_at      DateTime  @default(now())
}

model ExpenseLineItem {
  id            String          @id @default(uuid())
  expense       Expense         @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  expense_id    String
  description   String
  quantity      Decimal         @default(1)
  unit_price    Decimal
  total_amount  Decimal
  category      ExpenseCategory?@relation(fields: [category_id], references: [id])
  category_id   String?
  gl_account    GLAccount?      @relation(fields: [gl_account_id], references: [id])
  gl_account_id String?
  created_at    DateTime        @default(now())
}

model ExpenseCategory {
  id          String            @id @default(uuid())
  name        String
  expenses    Expense[]
  line_items  ExpenseLineItem[]
}

model GLAccount {
  id          String            @id @default(uuid())
  name        String
  code        String
  expenses    Expense[]
  line_items  ExpenseLineItem[]
}

model Vendor {
  id       String    @id @default(uuid())
  name     String
  expenses Expense[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CONTROLLER
  USER
}

enum ModuleCategory {
  FINANCE
  ADMINISTRATION
  REPORTING
}

enum ExpenseStatus {
  draft
  submitted
  approved
  rejected
}