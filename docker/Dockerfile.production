# Multi-stage Docker build for INFOtrac Production Deployment
# Optimized for info.onbb.ca:4211

# Stage 1: Build the application
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build arguments for production
ARG VITE_SUPABASE_URL
ARG VITE_SUPABASE_ANON_KEY
ARG VITE_APP_ENV=production
ARG VITE_API_BASE_URL=https://info.onbb.ca:4211

# Set build environment variables
ENV VITE_SUPABASE_URL=$VITE_SUPABASE_URL \
    VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY \
    VITE_APP_ENV=$VITE_APP_ENV \
    VITE_API_BASE_URL=$VITE_API_BASE_URL \
    NODE_ENV=production

# Build the application
RUN npm run build

# Stage 2: Production runtime
FROM nginx:alpine

# Install required packages
RUN apk add --no-cache curl nodejs npm bash

# Create app directory
RUN mkdir -p /app/config /app/scripts

# Copy nginx configuration for port 4211
COPY docker/nginx-production.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy deployment scripts
COPY docker/scripts/ /app/scripts/
COPY docker/entrypoint.sh /app/entrypoint.sh

# Make scripts executable
RUN chmod +x /app/scripts/* /app/entrypoint.sh

# Copy environment template
COPY .env.claude.example /app/config/.env.template

# Create health check endpoint
RUN echo '{"status":"healthy","service":"infotrac","timestamp":"'"$(date -Iseconds)"'"}' > /usr/share/nginx/html/health.json

# Expose port 4211 as specified
EXPOSE 4211

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:4211/health.json || exit 1

# Labels for container metadata
LABEL maintainer="INFOtrac Team" \
      version="2.0.0" \
      description="INFOtrac Production Deployment for info.onbb.ca:4211" \
      port="4211"

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]