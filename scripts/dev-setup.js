#!/usr/bin/env node

/**
 * Development Environment Setup Script
 * Automates the initial setup and daily startup of the INFOtrac development environment
 */

import { execSync } from 'child_process';
import { existsSync, writeFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

console.log('üöÄ INFOtrac Development Environment Setup');
console.log('=========================================\n');

function execCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    execSync(command, { stdio: 'inherit', cwd: rootDir });
    console.log(`‚úÖ ${description} completed\n`);
  } catch (error) {
    console.error(`‚ùå Failed: ${description}`);
    console.error(error.message);
    process.exit(1);
  }
}

function checkPrerequisites() {
  console.log('üîç Checking prerequisites...\n');

  const requirements = [
    { command: 'docker --version', name: 'Docker Desktop' },
    { command: 'supabase --version', name: 'Supabase CLI' },
    { command: 'node --version', name: 'Node.js' },
  ];

  for (const req of requirements) {
    try {
      const output = execSync(req.command, { encoding: 'utf8' });
      console.log(`‚úÖ ${req.name}: ${output.trim()}`);
    } catch (error) {
      console.error(`‚ùå Missing: ${req.name}`);
      console.error(`   Please install ${req.name} and try again`);
      process.exit(1);
    }
  }
  console.log();
}

function createEnvFiles() {
  console.log('üìù Setting up environment files...\n');

  // Local development environment
  const localEnvPath = join(rootDir, '.env.local');
  if (!existsSync(localEnvPath)) {
    const localEnvContent = `# Local Supabase Development Environment
# Auto-generated by dev-setup.js

# Local Supabase Configuration
VITE_SUPABASE_URL=http://127.0.0.1:54321
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

# Service role key for admin operations
VITE_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

# Database connection
DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres

# Development mode
NODE_ENV=development
VITE_ENV=local
`;
    writeFileSync(localEnvPath, localEnvContent);
    console.log('‚úÖ Created .env.local for local development');
  } else {
    console.log('‚úÖ .env.local already exists');
  }

  // Example production environment
  const prodExamplePath = join(rootDir, '.env.production.example');
  if (!existsSync(prodExamplePath)) {
    const prodExampleContent = `# Production Environment Template
# Copy to .env.production and fill in your actual values

# Remote Supabase Configuration
VITE_SUPABASE_URL=https://your-project-ref.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key-here
VITE_SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# Production settings
NODE_ENV=production
VITE_ENV=production

# Optional: Analytics and monitoring
VITE_GOOGLE_ANALYTICS_ID=
VITE_SENTRY_DSN=
`;
    writeFileSync(prodExamplePath, prodExampleContent);
    console.log('‚úÖ Created .env.production.example template');
  } else {
    console.log('‚úÖ .env.production.example already exists');
  }

  console.log();
}

function setupSupabase() {
  console.log('üóÑÔ∏è Setting up local Supabase...\n');

  // Check if Supabase is already running
  try {
    execSync('supabase status', { stdio: 'pipe', cwd: rootDir });
    console.log('‚úÖ Supabase is already running');
  } catch (error) {
    // Supabase not running, start it
    execCommand('supabase start', 'Starting local Supabase');
  }

  // Display connection info
  try {
    const status = execSync('supabase status', { encoding: 'utf8', cwd: rootDir });
    console.log('üìä Supabase Status:');
    console.log(status);
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not retrieve Supabase status');
  }
}

function displayUsefulCommands() {
  console.log('üéØ Development Commands:\n');
  console.log('# Start development with local Supabase:');
  console.log('npm run dev:full\n');

  console.log('# Database management:');
  console.log('npm run db:studio    # Open database UI');
  console.log('npm run db:reset     # Reset and re-run migrations');
  console.log('npm run db:seed      # Seed with test data\n');

  console.log('# Development modes:');
  console.log('npm run dev:local    # Use local Supabase');
  console.log('npm run dev:remote   # Use remote Supabase\n');

  console.log('# Utilities:');
  console.log('npm run clean:full   # Clean everything and reset');
  console.log('npm run type-check   # TypeScript validation');
  console.log('npm run test         # Run test suite\n');

  console.log('üåê Access Points:');
  console.log('‚Ä¢ React App: http://localhost:8080');
  console.log('‚Ä¢ Supabase Studio: http://127.0.0.1:54323');
  console.log('‚Ä¢ Email Testing: http://127.0.0.1:54324\n');
}

// Main execution
async function main() {
  try {
    checkPrerequisites();
    createEnvFiles();
    setupSupabase();

    console.log('üéâ Development environment setup complete!\n');
    displayUsefulCommands();

  } catch (error) {
    console.error('üí• Setup failed:', error.message);
    process.exit(1);
  }
}

main();